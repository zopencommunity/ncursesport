diff --git a/progs/clear.c b/progs/clear.c
index 97cb0f3..6a84120 100644
--- a/progs/clear.c
+++ b/progs/clear.c
@@ -41,6 +41,37 @@
 #include <clear_cmd.h>
 #include <tty_settings.h>
 
+#ifdef __MVS__
+#define MVS_CLEAR "/bin/clear"
+#define MVS_CLEAR_LEN (sizeof(MVS_CLEAR)-1)
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/wait.h>
+static bool
+do_mvs_clear (int argc, char **argv)
+{
+
+  pid_t pid = fork();
+  if (pid == 0) {
+    argv[0] = MVS_CLEAR;
+    execvp(MVS_CLEAR, argv);
+  } else if (pid > 0) {
+    int wstatus;
+    pid_t waitchild = waitpid(pid, &wstatus, WUNTRACED | WCONTINUED);
+    if (waitchild == -1) {
+      perror("waitpid");
+      return false;
+    }
+    if (WIFEXITED(wstatus)) {
+      return WEXITSTATUS(wstatus) == 0 ? true : false;
+    } else if (WIFSIGNALED(wstatus)) {
+      fprintf(stderr, "killed by signal %d\n", WTERMSIG(wstatus));
+    }
+  }
+}
+#endif
+
+
 MODULE_ID("$Id: clear.c,v 1.24 2021/03/20 18:23:14 tom Exp $")
 
 const char *_nc_progname = "clear";
@@ -72,11 +103,20 @@ main(
     int fd;
     int c;
     char *term;
+    char *omvs;
     bool opt_x = FALSE;		/* clear scrollback if possible */
 
     _nc_progname = _nc_rootname(argv[0]);
     term = getenv("TERM");
 
+#ifdef __MVS__
+    omvs = getenv("_BPX_TERMPATH");
+    if (strcmp(omvs, "OMVS") == 0) {
+      do_mvs_clear(argc, argv);
+      exit(0);
+    }
+#endif
+
     while ((c = getopt(argc, argv, "T:Vx")) != -1) {
 	switch (c) {
 	case 'T':
